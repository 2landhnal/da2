apiVersion: apps/v1
kind: Deployment
metadata:
  name: course-service
spec:
  selector:
    matchLabels:
      app: course-service
  template:
    metadata:
      labels:
        app: course-service
    spec:
      containers:
        - name: course-service
          image: 2land/da2_course:v2
          ports:
            - containerPort: 3000 # Cổng ứng dụng Node.js
          volumeMounts:
            - name: firebase-secret
              mountPath: /app/src/config/firebase/firebase-adminsdk.json
              subPath: firebase-adminsdk.json # Mount file firebase-adminsdk.json
          envFrom:
            - secretRef:
                name: my-secret
          livenessProbe:
            httpGet:
              path: /healthCheck
              port: 3000
            initialDelaySeconds: 5 # Thời gian chờ sau khi container khởi động trước khi bắt đầu health check
            periodSeconds: 10 # Kiểm tra sức khỏe mỗi 10 giây
            failureThreshold: 3 # Số lần thất bại liên tiếp trước khi Kubernetes cho container là không khỏe
          readinessProbe:
            httpGet:
              path: /healthCheck
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          resources: # Cần định nghĩa resources để HPA hoạt động
            requests:
              cpu: "100m" # CPU tối thiểu mà container cần
              memory: "128Mi" # RAM tối thiểu mà container cần
            limits:
              cpu: "1000m" # CPU tối đa mà container được sử dụng
              memory: "4096Mi" # RAM tối đa mà container được sử dụng
      volumes:
        - name: firebase-secret
          secret:
            secretName: firebase-adminsdk-secret # Tên Secret đã tạo ở trên

---
apiVersion: v1
kind: Service
metadata:
  name: course-service
spec:
  selector:
    app: course-service
  ports:
    - protocol: TCP
      port: 80 # Cổng service expose
      targetPort: 3000 # Cổng trong container ứng dụng
  type: ClusterIP # Bạn có thể đổi thành LoadBalancer hoặc NodePort tùy vào yêu cầu

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: course-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: course-service # Tên của Deployment cần auto-scale
  minReplicas: 1 # Số lượng Pod tối thiểu
  maxReplicas: 3 # Số lượng Pod tối đa
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50 # Tăng Pod khi CPU trung bình > 50%
