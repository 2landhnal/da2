worker_processes  1;

events {
    worker_connections 1024; # Số lượng kết nối tối đa
}

http {
    lua_shared_dict jwt_cache 10m;

    server {
        listen 80;
        server_name localhost;

        # Logic xử lý xác thực JWT
        set $auth_required 0;

        location ~* ^/(secure/)?(?<service>[^/]+)/ {
            rewrite_by_lua_block {
                local jwt = require "resty.jwt"

                -- Kiểm tra xem URL có bắt đầu bằng /auth hay không
                local auth_required = ngx.var.uri:find("^/secure/") ~= nil
                ngx.var.auth_required = auth_required and 1 or 0

                if auth_required then
                    -- Lấy JWT từ header Authorization
                    local jwt_token = ngx.var.http_Authorization
                    if not jwt_token or not jwt_token:find("Bearer ") then
                        ngx.status = ngx.HTTP_UNAUTHORIZED
                        ngx.say('{"error":"Missing or invalid Authorization header"}')
                        return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    end

                    jwt_token = jwt_token:sub(8) -- Cắt "Bearer " khỏi token
                    local jwt_obj = jwt:verify("your-secret-key", jwt_token)
                    
                    if not jwt_obj.verified then
                        ngx.status = ngx.HTTP_UNAUTHORIZED
                        ngx.say('{"error":"Invalid JWT"}')
                        return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    end

                    -- Thêm các header từ payload JWT
                    ngx.req.set_header("x-user-id", jwt_obj.payload.uid)
                    ngx.req.set_header("x-user-role", jwt_obj.payload.role)
                else
                    -- Xóa các header nếu không cần xác thực
                    ngx.req.clear_header("x-user-id")
                    ngx.req.clear_header("x-user-role")
                end
            }

            # Định tuyến đến service
            set $backend_url "http://${service}-service:80";
            proxy_pass $backend_url;
        }
    }
}
