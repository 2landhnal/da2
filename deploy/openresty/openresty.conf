worker_processes  1;

events {
    worker_connections 1024; # Số lượng kết nối tối đa
}

http {
    lua_shared_dict jwt_cache 10m;
    limit_req_zone $binary_remote_addr zone=secure_api_rate_limit:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=api_rate_limit:10m rate=10r/s;
    # 1m = 16000 IP address to check => 10m 

    server {
        listen 80;
        server_name localhost;

        location ~ ^/v1/api/secure/(.*)/ {
            resolver 34.118.224.10;
            limit_req zone=secure_api_rate_limit burst=10 nodelay;
            rewrite_by_lua_block {
                local jwt = require "resty.jwt"

                local jwt_token = ngx.var.http_Authorization
                if not jwt_token or not jwt_token:find("Bearer ") then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say('{"error":"Missing or invalid Authorization header"}')
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                jwt_token = jwt_token:sub(8)
                local jwt_obj = jwt:verify("access", jwt_token)
                
                if not jwt_obj.verified then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say('{"error":"Invalid JWT"}')
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                ngx.req.set_header("x-user-id", jwt_obj.payload.uid)
                ngx.req.set_header("x-user-role", jwt_obj.payload.role)
            }

            proxy_pass http://$1-service.default.svc.cluster.local:80/v1/api/;
        }

        location ~ ^/v1/api/(.*)/ {
            resolver 34.118.224.10;
            limit_req zone=api_rate_limit burst=10 nodelay;
            rewrite_by_lua_block {
                ngx.req.clear_header("x-user-id")
                ngx.req.clear_header("x-user-role")
            }

            proxy_pass http://$1-service.default.svc.cluster.local:80/v1/api/;
        }
    }
}