worker_processes  1;

events {
    worker_connections 1024; # S... l.....ng k...t n...i t...i ..a
}

http {
    limit_req_zone $binary_remote_addr zone=secure_api_rate_limit:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=api_rate_limit:10m rate=10r/s;

    server {
        listen 443 ssl; # managed by Certbot
        ssl_certificate /etc/letsencrypt/live/api.nguyencao.site/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/api.nguyencao.site/privkey.pem; # managed by Certbot
        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

        location /v1/api/secure/logger/ {
            limit_req zone=secure_api_rate_limit burst=10 nodelay;
            rewrite_by_lua_block {
                local jwt = require "resty.jwt"

                local jwt_token = ngx.var.http_Authorization
                if not jwt_token or not jwt_token:find("Bearer ") then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say('{"error":"Missing or invalid Authorization header"}')
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                                    end

                jwt_token = jwt_token:sub(8)
                local jwt_obj = jwt:verify("token-here", jwt_token)

                if not jwt_obj.verified then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say('{"error":"Invalid JWT"}')
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                ngx.req.set_header("x-user-id", jwt_obj.payload.uid)
                ngx.req.set_header("x-user-role", jwt_obj.payload.role)
            }

            proxy_pass http://logger-service:80/v1/api/;
        }

        location /v1/api/logger/{
            limit_req zone=api_rate_limit burst=10 nodelay;
            rewrite_by_lua_block {
                ngx.req.clear_header("x-user-id")
                ngx.req.clear_header("x-user-role")
            }
            
            proxy_pass http://logger-service:80/v1/api/;
        }

        location /{
            limit_req zone=api_rate_limit burst=10 nodelay;
            return 200 "Hello world";
        }
    }

    server {
        if ($host = api.nguyencao.site) {
            return 301 https://$host$request_uri;
        } # managed by Certbot

        listen 80;
        server_name api.nguyencao.site;
        return 404; # managed by Certbot
    }
}